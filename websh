#!/bin/bash

readonly TMPDIR="$(mktemp -d)"

function usage(){
  cat << 'USG' >&2
websh

Description:
  websh(https://websh.jiro4989.com/) on Bash

Usage:
  $ websh '<cmd>'
  $ echo <cmd> | websh

Requirement:
  jq, curl, GNU sed
USG
  exit 0
}

function check_jq(){
  which jq > /dev/null 2> /dev/null || {
    echo 'please install jq command' >&2 && exit 1
  }
}

function check_curl(){
  which curl > /dev/null 2> /dev/null || {
    echo 'please install curl command' >&2 && exit 1
  }
}

function check_sed(){
  sed --help |& grep -q '\-z' || {
    echo 'please install GNU sed command' >&2 && exit 1
  }
}

function img_to_base64(){
  for i in "$@";{
    base64 "$i" | sed -z 's/\n//g;s/.*/&\n/'
  } | xargs
}

function mk_req(){
  local code arr str
  code="$1";shift
  arr=(\"%q\" \"%q\" \"%q\" \"%q\")
  str="$(echo "{\"code\":\"%s\",\"images\":[${arr[*]:0:$#}]}" | tr \  ,)"

  # shellcheck disable=SC2059
  if [ "$#" -eq 0 ];then
    printf "$str" "$code"
  else
    printf "$str" "$code" "$(img_to_base64 "$*")"
  fi
}

function websh_post(){
  curl -s https://websh.jiro4989.com/api/shellgei \
       -X POST -H "Content-Type: application/json" \
       -d "$(mk_req "$@")"
}

function get_req(){
  echo -e "$(cat - | jq -r '
    [
      "\\e[42mstdout:\\e[m",
      .stdout,
      "\\e[41mstderr:\\e[m",
      .stderr,
      "\\e[45mimages:\\e[m",
      (if .images == [] then "(none)" else (
        .images[] | [.image, (.filesize|tostring), .format] | join(" ")
      ) end),
      "\n\\e[30;47m[status: " + (.status|tostring) +
      ", time: " + (.elapsed_time|sub("milsec";" ms")) + "]\\e[m"
    ] | join("\n")
  ')"
}

function base64_to_img(){
  if [[ -z "$(sed -nrz 's/.*\x1b\[45mimages:\x1b\[m\n\((none)\).*/\1/p' "${TMPDIR}/res")" ]]
  then
    (
      sed -rnz 's/.*(\x1b\[45mimages:\x1b\[m\n)(.*)(\n\x1b\[30;47m).*/\2/p' "${TMPDIR}/res" |
      while read -r a b c;do
        local i
        local path="$TMPDIR/$((i++)).$c"
        echo "$a" | base64 -d > "$path"
        echo "(path: ${path}, size: ${b} byte)"
      done
    ) > "${TMPDIR}/a"
    sed -rz "s_(.*)(\x1b\[45mimages:\x1b\[m\n)(.*)(\n\x1b\[30;47m)(.*)_\1\2$(sed -z 's/\n/\\n/g' "${TMPDIR}/a")\4\5_" "$TMPDIR/res"
  else
    cat "${TMPDIR}/res"
  fi
}

function main(){
  { [ $# -ne 0 ] || [ -p /dev/stdin ];} || usage
  check_jq && check_curl && check_sed
  echo -e '\e[44minput:\e[m'
  if [ -p /dev/stdin ]
  then
    cp /dev/stdin "${TMPDIR}/stdin"
    cat "${TMPDIR}/stdin"
    echo -ne '\n\e[5mwait!\e[m\r'
    websh_post "$(cat "${TMPDIR}/stdin")" | get_req > "${TMPDIR}/res"
  else
    echo "$@"
    echo -ne '\n\e[5mwait!\e[m\r'
    websh_post "$@" | get_req > "${TMPDIR}/res"
  fi
  base64_to_img
  rm -rf "${TMPDIR}/a" "${TMPDIR}/res" "${TMPDIR}/stdin"
}

main "$@"
exit "$?"
