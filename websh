#!/bin/bash

readonly TMPDIR="$(mktemp -d)"
IMG_SAVEDIR="$TMPDIR"
INPUT_IMAGES=()
PLAIN=false

function usage(){
  cat << 'USG' >&2
websh

Description:
  websh(https://websh.jiro4989.com) on Bash

Usage:
  $ websh [-d IMG_SAVEDIR ] [ -i INPUT_IMAGE ] [-h|-p] cmd ...

  $ echo cmd ... | websh

Option:
  cmd           	Shell Commands wanted to run
  -d IMG_SAVEDIR	Set a dir saving output image(s) (default: $TMPDIR)
  -i INPUT_IMAGE	Specify the input image path (max: 4)
  -h            	Print help and exit
  -p            	Print stdout only

Requirement:
  jq, curl, GNU sed
USG
  exit 0
}

function check_jq(){
  which jq > /dev/null 2> /dev/null || {
    echo 'Error: Please install jq command.' >&2 && exit 1
  }
}

function check_curl(){
  which curl > /dev/null 2> /dev/null || {
    echo 'Error: Please install curl command.' >&2 && exit 1
  }
}

function check_sed(){
  sed --help |& grep -q '\-z' || {
    echo 'Error: please install GNU sed command.' >&2 && exit 1
  }
}

function img_to_base64(){
  for i in "$@"
  {
    base64 < "$i" | sed -z 's/\n//g;s/.*/&\n/'
  } | xargs
}

function mk_req(){
  local code arr str
  code="$*"
  arr=(\"%s\" \"%s\" \"%s\" \"%s\")
  str="$(echo "{\"code\":\"%s\",\"images\":[${arr[*]:0:${#INPUT_IMAGES[*]}}]}" | tr \  ,)"

  # shellcheck disable=SC2059
  if [ "${#INPUT_IMAGES[*]}" -eq 0 ]
  then
    printf "$str" "$code"
  else
    local basecodes
    basecodes=()
    for i in "${INPUT_IMAGES[@]}"
    do
      basecodes+=("$(img_to_base64 "$i")")
    done
    # shellcheck disable=SC2046,SC2086
    printf "$str" "$code" ${basecodes[*]}
  fi
}

function websh_post(){
  curl -s https://websh.jiro4989.com/api/shellgei \
       -X POST -H "Content-Type: application/json" \
       -d "$(mk_req "$@")"
}

function get_req(){
  if "${PLAIN}"
  then
    echo -e "$(cat - | jq -r '
      .stdout
    ')"
    exit
  else
    echo -e "$(cat - | jq -r '
      [
        "\\e[42mstdout:\\e[m",
        .stdout,
        "\\e[41mstderr:\\e[m",
        .stderr,
        "\\e[45mimages:\\e[m",
        (if .images == [] then "(none)" else (
          .images[] | [.image, (.filesize|tostring), .format] | join(" ")
        ) end),
        "\n\\e[30;47m[status: " + (.status|tostring) +
        ", time: " + (.elapsed_time|sub("milsec";" ms")) + "]\\e[m"
      ] | join("\n")
    ')"
  fi
}

function base64_to_img(){
  if [[ -z "$(sed -nrz 's/.*\x1b\[45mimages:\x1b\[m\n\((none)\).*/\1/p' "${TMPDIR}/res")" ]]
  then
    (
      sed -rnz 's/.*(\x1b\[45mimages:\x1b\[m\n)(.*)(\n\x1b\[30;47m).*/\2/p' "${TMPDIR}/res" |
      while read -r a b c;do
        local i
        local savepath="$IMG_SAVEDIR/$((i++)).$c"
        echo "$a" | base64 -d > "$savepath"
        echo "(path: ${savepath}, size: ${b} byte)"
      done
    ) > "${TMPDIR}/a"
    sed -rz "s_(.*)(\x1b\[45mimages:\x1b\[m\n)(.*)(\n\x1b\[30;47m)(.*)_\1\2$(sed -z 's/\n/\\n/g' "${TMPDIR}/a")\4\5_" "$TMPDIR/res"
  else
    cat "${TMPDIR}/res"
  fi
}

function main(){
  {
    [ $# -ne 0 ] || [ -p /dev/stdin ]
  } || usage
  check_jq && check_curl && check_sed

  while getopts "i:d:hp" OPT
  do
    case "$OPT" in
      i) if [ -f "$OPTARG" ]
         then
           INPUT_IMAGES+=("$OPTARG")
         else
           echo "Error: File '${OPTARG}' is not exist." >&2 && usage
         fi
         ;;
      d) if [ -d "$OPTARG" ]
         then
           IMG_SAVEDIR="$OPTARG"
         else
           echo "Error: Dir '${OPTARG}' is not exist." >&2 && usage
         fi
         ;;
      h) usage
         ;;
      p) PLAIN=true
         ;;
      *) echo "Error: Option '${OPT}' is invalid." >&2 && usage
         ;;
    esac
  done
  local args argnum
  args=($(getopt i:d:hp "$@"))
  argnum="$#"
  shift "$((OPTIND - 1))"
  if [ "${args[0]}" != "--" ] && [ "$argnum" -eq "$#" ]
  then
    echo 'Error: cmd is placed before the options?' >&2 && usage
  fi
  if [ "${#INPUT_IMAGES[*]}" -gt 4 ]
  then
    echo 'Up to 4 input images.' >&2 && usage
  fi

  "${PLAIN}" || echo -e '\e[44minput:\e[m'
  if [ -p /dev/stdin ]
  then
    cp /dev/stdin "${TMPDIR}/stdin"
    "${PLAIN}" || cat "${TMPDIR}/stdin"
    "${PLAIN}" || echo -ne '\n\e[5mwait!\e[m\r'
    websh_post "$(cat "${TMPDIR}/stdin")" | get_req > "${TMPDIR}/res"
  else
    "${PLAIN}" || echo "$@"
    "${PLAIN}" || echo -ne '\n\e[5mwait!\e[m\r'
    websh_post "$@" | get_req > "${TMPDIR}/res"
  fi
  if "${PLAIN}"
  then
    base64_to_img |& cat > /dev/null
    cat "${TMPDIR}/res"
  else
    base64_to_img
  fi
  rm -rf "${TMPDIR}/a" "${TMPDIR}/res" "${TMPDIR}/stdin"
}

main "$@"
exit "$?"
